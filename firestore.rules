
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default: Deny all reads and writes if no other rules match.
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow authenticated users to read and write to the 'users' collection.
    // For specific user documents, only the owner can read/write.
    // Admins might have broader access (can be added later).
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Example for admin access (requires an 'role' field in user docs):
      // allow list, get: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Allow authenticated users to read all pages.
    // Allow authenticated users to create, update, and delete pages.
    // More granular rules (e.g., only author or admin can update/delete) can be added.
    match /pages/{pageId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null;
      // Example for author/admin control:
      // allow update, delete: if request.auth != null && (
      //   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin' ||
      //   resource.data.authorId == request.auth.uid // Assuming an 'authorId' field linked to auth.uid
      // );
    }

    // Allow authenticated users to read and write content blocks.
    match /contentBlocks/{blockId} {
      allow read, write: if request.auth != null;
    }

    // Allow authenticated users to read and write content files.
    match /contentFiles/{fileId} {
      allow read, write: if request.auth != null;
    }

    // Allow authenticated users to read and write media items.
    match /mediaItems/{itemId} {
      allow read, write: if request.auth != null;
    }

    // Allow authenticated users to read audit logs.
    // Creating audit logs is typically handled by backend functions or trusted server environments.
    // For client-side creation (if absolutely necessary and secured), ensure appropriate checks.
    match /auditLogs/{logId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Be cautious with client-side creation of audit logs.
    }

    // Allow authenticated users to read roles.
    // Writing roles should typically be restricted to admins.
    match /roles/{roleId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Placeholder: Add admin check e.g. && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
  }
}
